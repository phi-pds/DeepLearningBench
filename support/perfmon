#!/usr/bin/python
import os
import sys
import subprocess
import time
import operator
import pdb
from os.path import join
from functools import reduce

CUR_DIR     = os.path.abspath(os.path.dirname(__file__))

class PerfMon(object):
    PERF_SAMPLE_RATE              = 1000

    # init
    def __init__(self, \
                 log =     "/tmp/perf.data", \
                 duration = 30):
        (self.LOG) = (log)
        self.duration = duration

    # entry
    def stat_start(self):
        self._perf_stat_start()

    def stat_stop(self):
        self._perf_stat_stop()

    def record_start(self):
        self._perf_record_start()

    def record_stop(self):
        self._perf_record_stop()

    # perf stat
    def _perf_stat_stop(self):
        self._perf_record_stop()
    
    def _perf_stop(self):
        with open("/dev/null", "a") as fd:
            self._exec_cmd("sudo kill -INT $(pgrep perf)", fd)

    def _perf_stat_start(self):
        perf_out = os.path.normpath(
                os.path.join(self.LOG))
        self._exec_cmd("sudo perf stat -a -o %s -g &" %
                (perf_out ))

    # perf record
    def _perf_record_stop(self):
        print("record stop")
        self._perf_stop()

    def _perf_record_start(self):
        print("record start")
        perf_out = os.path.normpath(
            os.path.join(self.LOG))
        self._exec_cmd("sudo perf record -F %s -a -g -o %s &" %
                       (PerfMon.PERF_SAMPLE_RATE, perf_out))

    def _perf_stop(self):
        with open("/dev/null", "a") as fd:
            self._exec_cmd("sudo kill -INT $(pgrep perf)", fd)
        self._exec_cmd("sudo chmod +r %s" % self.LOG)
        
    def _exec_cmd(self, cmd, out=None):
        p = subprocess.Popen(cmd, shell=True, stdout=out, stderr=out)
        #p.wait()
        return p

if __name__ == "__main__":

    # get command
    if len(sys.argv) is not 3:
        exit(1)
    cmd = sys.argv[1]
    log = sys.argv[2]

    # run operation
    op = {"stat_start":PerfMon.stat_start,
          "stat_stop":PerfMon.stat_stop,
          "record_start":PerfMon.record_start,
          "record_stop":PerfMon.record_stop}
    def nop(x):
        exit(2)
    cmd_fn = op.get(cmd, nop)

    perfmon = PerfMon(log)
    cmd_fn(perfmon)
